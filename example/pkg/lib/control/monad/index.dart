// Generated by hollowpoint version 0.1.0
import 'package:pkg/control/applicative/index.dart' as Control_Applicative;
import 'package:pkg/control/bind/index.dart' as Control_Bind;
class Monad {
    final dynamic Applicative0;
    final dynamic Bind1;
    const Monad(this.Applicative0, this.Bind1);
    static dynamic get create => (Applicative0) {
        return (Bind1) {
            return Monad(Applicative0, Bind1);
        };
    };
}
whenM(dictMonad) {
    return (mb) {
        return (m) {
            return Control_Bind.bind(dictMonad['Bind1'](null))(mb)((b) {
                return Control_Applicative.when(dictMonad['Applicative0'](null))(b)(m);
            });
        };
    };
}
unlessM(dictMonad) {
    return (mb) {
        return (m) {
            return Control_Bind.bind(dictMonad['Bind1'](null))(mb)((b) {
                return Control_Applicative.unless(dictMonad['Applicative0'](null))(b)(m);
            });
        };
    };
}
final monadFn = Monad(() {
    return Control_Applicative.applicativeFn;
}, () {
    return Control_Bind.bindFn;
});
final monadArray = Monad(() {
    return Control_Applicative.applicativeArray;
}, () {
    return Control_Bind.bindArray;
});
liftM1(dictMonad) {
    return (f) {
        return (a) {
            return Control_Bind.bind(dictMonad['Bind1'](null))(a)((a$prime) {
                return Control_Applicative.pure(dictMonad['Applicative0'](null))(f(a$prime));
            });
        };
    };
}
ap(dictMonad) {
    return (f) {
        return (a) {
            return Control_Bind.bind(dictMonad['Bind1'](null))(f)((f$prime) {
                return Control_Bind.bind(dictMonad['Bind1'](null))(a)((a$prime) {
                    return Control_Applicative.pure(dictMonad['Applicative0'](null))(f$prime(a$prime));
                });
            });
        };
    };
}
