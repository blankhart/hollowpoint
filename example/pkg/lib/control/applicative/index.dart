// Generated by hollowpoint version 0.1.0
import 'package:pkg/control/apply/index.dart' as Control_Apply;
import 'package:pkg/data/unit/index.dart' as Data_Unit;
class Applicative {
    final dynamic Apply0;
    final dynamic pure;
    const Applicative(this.Apply0, this.pure);
    static dynamic get create => (Apply0) {
        return (pure) {
            return Applicative(Apply0, pure);
        };
    };
}
pure(dict) {
    return dict['pure'];
}
unless(dictApplicative) {
    return (v) {
        return (v1) {
            return (() {
                final $8 = v;
                final $9 = v1;
                if (!$8) {
                    final m = $9;
                    return m;
                };
                if ($8) {
                    return pure(dictApplicative)(Data_Unit.unit);
                };
                throw FallThroughError();
            })();
        };
    };
}
when(dictApplicative) {
    return (v) {
        return (v1) {
            return (() {
                final $10 = v;
                final $11 = v1;
                if ($10) {
                    final m = $11;
                    return m;
                };
                if (!$10) {
                    return pure(dictApplicative)(Data_Unit.unit);
                };
                throw FallThroughError();
            })();
        };
    };
}
liftA1(dictApplicative) {
    return (f) {
        return (a) {
            return Control_Apply.apply(dictApplicative['Apply0'](null))(pure(dictApplicative)(f))(a);
        };
    };
}
final applicativeFn = Applicative(() {
    return Control_Apply.applyFn;
}, (x) {
    return (v) {
        return x;
    };
});
final applicativeArray = Applicative(() {
    return Control_Apply.applyArray;
}, (x) {
    return [ x ];
});
