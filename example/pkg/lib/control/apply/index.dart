// Generated by hollowpoint version 0.1.0
import './foreign.dart' as $foreign;
export './foreign.dart';
import 'package:pkg/control/category/index.dart' as Control_Category;
import 'package:pkg/data/function/index.dart' as Data_Function;
import 'package:pkg/data/functor/index.dart' as Data_Functor;
class Apply {
    final dynamic Functor0;
    final dynamic apply;
    const Apply(this.Functor0, this.apply);
    static dynamic get create => (Functor0) {
        return (apply) {
            return Apply(Functor0, apply);
        };
    };
}
final applyFn = Apply(() {
    return Data_Functor.functorFn;
}, (f) {
    return (g) {
        return (x) {
            return f(x)(g(x));
        };
    };
});
final applyArray = Apply(() {
    return Data_Functor.functorArray;
}, $foreign.arrayApply);
apply(dict) {
    return dict['apply'];
}
applyFirst(dictApply) {
    return (a) {
        return (b) {
            return apply(dictApply)(Data_Functor.map(dictApply['Functor0'](null))(Data_Function.$$const)(a))(b);
        };
    };
}
applySecond(dictApply) {
    return (a) {
        return (b) {
            return apply(dictApply)(Data_Functor.map(dictApply['Functor0'](null))(Data_Function.$$const(Control_Category.identity(Control_Category.categoryFn)))(a))(b);
        };
    };
}
lift2(dictApply) {
    return (f) {
        return (a) {
            return (b) {
                return apply(dictApply)(Data_Functor.map(dictApply['Functor0'](null))(f)(a))(b);
            };
        };
    };
}
lift3(dictApply) {
    return (f) {
        return (a) {
            return (b) {
                return (c) {
                    return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply['Functor0'](null))(f)(a))(b))(c);
                };
            };
        };
    };
}
lift4(dictApply) {
    return (f) {
        return (a) {
            return (b) {
                return (c) {
                    return (d) {
                        return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply['Functor0'](null))(f)(a))(b))(c))(d);
                    };
                };
            };
        };
    };
}
lift5(dictApply) {
    return (f) {
        return (a) {
            return (b) {
                return (c) {
                    return (d) {
                        return (e) {
                            return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply['Functor0'](null))(f)(a))(b))(c))(d))(e);
                        };
                    };
                };
            };
        };
    };
}
