// Generated by hollowpoint version 0.1.0
import './foreign.dart' as $foreign;
export './foreign.dart';
import 'package:pkg/control/apply/index.dart' as Control_Apply;
import 'package:pkg/control/category/index.dart' as Control_Category;
import 'package:pkg/data/function/index.dart' as Data_Function;
class Discard {
    final dynamic discard;
    const Discard(this.discard);
    static dynamic get create => (discard) {
        return Discard(discard);
    };
}
class Bind {
    final dynamic Apply0;
    final dynamic bind;
    const Bind(this.Apply0, this.bind);
    static dynamic get create => (Apply0) {
        return (bind) {
            return Bind(Apply0, bind);
        };
    };
}
discard(dict) {
    return dict['discard'];
}
final bindFn = Bind(() {
    return Control_Apply.applyFn;
}, (m) {
    return (f) {
        return (x) {
            return f(m(x))(x);
        };
    };
});
final bindArray = Bind(() {
    return Control_Apply.applyArray;
}, $foreign.arrayBind);
bind(dict) {
    return dict['bind'];
}
bindFlipped(dictBind) {
    return Data_Function.flip(bind(dictBind));
}
composeKleisliFlipped(dictBind) {
    return (f) {
        return (g) {
            return (a) {
                return bindFlipped(dictBind)(f)(g(a));
            };
        };
    };
}
composeKleisli(dictBind) {
    return (f) {
        return (g) {
            return (a) {
                return bind(dictBind)(f(a))(g);
            };
        };
    };
}
final discardUnit = Discard((dictBind) {
    return bind(dictBind);
});
ifM(dictBind) {
    return (cond) {
        return (t) {
            return (f) {
                return bind(dictBind)(cond)((cond$prime) {
                    return (() {
                        final $6 = cond$prime;
                        if ($6) {
                            return t;
                        };
                        return f;
                    })();
                });
            };
        };
    };
}
join(dictBind) {
    return (m) {
        return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
    };
}
