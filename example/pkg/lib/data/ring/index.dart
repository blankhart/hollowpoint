// Generated by hollowpoint version 0.1.0
import './foreign.dart' as $foreign;
export './foreign.dart';
import 'package:pkg/data/semiring/index.dart' as Data_Semiring;
import 'package:pkg/data/symbol/index.dart' as Data_Symbol;
import 'package:pkg/data/unit/index.dart' as Data_Unit;
import 'package:pkg/record/unsafe/index.dart' as Record_Unsafe;
import 'package:pkg/type/data/row_list/index.dart' as Type_Data_RowList;
class RingRecord {
    final dynamic SemiringRecord0;
    final dynamic subRecord;
    const RingRecord(this.SemiringRecord0, this.subRecord);
    static dynamic get create => (SemiringRecord0) {
        return (subRecord) {
            return RingRecord(SemiringRecord0, subRecord);
        };
    };
}
class Ring {
    final dynamic Semiring0;
    final dynamic sub;
    const Ring(this.Semiring0, this.sub);
    static dynamic get create => (Semiring0) {
        return (sub) {
            return Ring(Semiring0, sub);
        };
    };
}
subRecord(dict) {
    return dict['subRecord'];
}
sub(dict) {
    return dict['sub'];
}
final ringUnit = Ring(() {
    return Data_Semiring.semiringUnit;
}, (v) {
    return (v1) {
        return Data_Unit.unit;
    };
});
final ringRecordNil = RingRecord(() {
    return Data_Semiring.semiringRecordNil;
}, (v) {
    return (v1) {
        return (v2) {
            return {};
        };
    };
});
ringRecordCons(dictIsSymbol) {
    return (dictCons) {
        return (dictRingRecord) {
            return (dictRing) {
                return RingRecord(() {
                    return Data_Semiring.semiringRecordCons(dictIsSymbol)(null)(dictRingRecord['SemiringRecord0'](null))(dictRing['Semiring0'](null));
                }, (v) {
                    return (ra) {
                        return (rb) {
                            return (() {
                                final tail = subRecord(dictRingRecord)(Type_Data_RowList.RLProxy())(ra)(rb);
                                final key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy());
                                final insert = Record_Unsafe.unsafeSet(key);
                                final get = Record_Unsafe.unsafeGet(key);
                                return insert(sub(dictRing)(get(ra))(get(rb)))(tail);
                            })();
                        };
                    };
                });
            };
        };
    };
}
ringRecord(dictRowToList) {
    return (dictRingRecord) {
        return Ring(() {
            return Data_Semiring.semiringRecord(null)(dictRingRecord['SemiringRecord0'](null));
        }, subRecord(dictRingRecord)(Type_Data_RowList.RLProxy()));
    };
}
final ringNumber = Ring(() {
    return Data_Semiring.semiringNumber;
}, $foreign.numSub);
final ringInt = Ring(() {
    return Data_Semiring.semiringInt;
}, $foreign.intSub);
ringFn(dictRing) {
    return Ring(() {
        return Data_Semiring.semiringFn(dictRing['Semiring0'](null));
    }, (f) {
        return (g) {
            return (x) {
                return sub(dictRing)(f(x))(g(x));
            };
        };
    });
}
negate(dictRing) {
    return (a) {
        return sub(dictRing)(Data_Semiring.zero(dictRing['Semiring0'](null)))(a);
    };
}
