// Generated by hollowpoint version 0.1.0
import './foreign.dart' as $foreign;
export './foreign.dart';
import 'package:pkg/data/symbol/index.dart' as Data_Symbol;
import 'package:pkg/record/unsafe/index.dart' as Record_Unsafe;
import 'package:pkg/type/data/row_list/index.dart' as Type_Data_RowList;
class ShowRecordFields {
    final dynamic showRecordFields;
    const ShowRecordFields(this.showRecordFields);
    static dynamic get create => (showRecordFields) {
        return ShowRecordFields(showRecordFields);
    };
}
class Show {
    final dynamic show;
    const Show(this.show);
    static dynamic get create => (show) {
        return Show(show);
    };
}
final showString = Show($foreign.showStringImpl);
final showRecordFieldsNil = ShowRecordFields((v) {
    return (v1) {
        return [  ];
    };
});
showRecordFields(dict) {
    return dict['showRecordFields'];
}
showRecord(dictRowToList) {
    return (dictShowRecordFields) {
        return Show((record) {
            return (() {
                final v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy())(record);
                return (() {
                    final $12 = v;
                    if ($12.length == 0) {
                        return "{}";
                    };
                    final fields = $12;
                    return $foreign.join(" ")([ "{", $foreign.join(", ")(fields), "}" ]);
                })();
            })();
        });
    };
}
final showNumber = Show($foreign.showNumberImpl);
final showInt = Show($foreign.showIntImpl);
final showChar = Show($foreign.showCharImpl);
final showBoolean = Show((v) {
    return (() {
        final $13 = v;
        if ($13) {
            return "true";
        };
        if (!$13) {
            return "false";
        };
        throw FallThroughError();
    })();
});
show(dict) {
    return dict['show'];
}
showArray(dictShow) {
    return Show($foreign.showArrayImpl(show(dictShow)));
}
showRecordFieldsCons(dictIsSymbol) {
    return (dictShowRecordFields) {
        return (dictShow) {
            return ShowRecordFields((v) {
                return (record) {
                    return (() {
                        final tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy())(record);
                        final key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy());
                        final focus = Record_Unsafe.unsafeGet(key)(record);
                        return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                    })();
                };
            });
        };
    };
}
