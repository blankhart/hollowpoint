// Generated by hollowpoint version 0.1.0
import './foreign.dart' as $foreign;
export './foreign.dart';
import 'package:pkg/data/symbol/index.dart' as Data_Symbol;
import 'package:pkg/data/unit/index.dart' as Data_Unit;
import 'package:pkg/data/void/index.dart' as Data_Void;
import 'package:pkg/record/unsafe/index.dart' as Record_Unsafe;
import 'package:pkg/type/data/row_list/index.dart' as Type_Data_RowList;
class SemigroupRecord {
    final dynamic appendRecord;
    const SemigroupRecord(this.appendRecord);
    static dynamic get create => (appendRecord) {
        return SemigroupRecord(appendRecord);
    };
}
class Semigroup {
    final dynamic append;
    const Semigroup(this.append);
    static dynamic get create => (append) {
        return Semigroup(append);
    };
}
final semigroupVoid = Semigroup((v) {
    return Data_Void.absurd;
});
final semigroupUnit = Semigroup((v) {
    return (v1) {
        return Data_Unit.unit;
    };
});
final semigroupString = Semigroup($foreign.concatString);
final semigroupRecordNil = SemigroupRecord((v) {
    return (v1) {
        return (v2) {
            return {};
        };
    };
});
final semigroupArray = Semigroup($foreign.concatArray);
appendRecord(dict) {
    return dict['appendRecord'];
}
semigroupRecord(dictRowToList) {
    return (dictSemigroupRecord) {
        return Semigroup(appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy()));
    };
}
append(dict) {
    return dict['append'];
}
semigroupFn(dictSemigroup) {
    return Semigroup((f) {
        return (g) {
            return (x) {
                return append(dictSemigroup)(f(x))(g(x));
            };
        };
    });
}
semigroupRecordCons(dictIsSymbol) {
    return (dictCons) {
        return (dictSemigroupRecord) {
            return (dictSemigroup) {
                return SemigroupRecord((v) {
                    return (ra) {
                        return (rb) {
                            return (() {
                                final tail = appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy())(ra)(rb);
                                final key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy());
                                final insert = Record_Unsafe.unsafeSet(key);
                                final get = Record_Unsafe.unsafeGet(key);
                                return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                            })();
                        };
                    };
                });
            };
        };
    };
}
