// Generated by hollowpoint version 0.1.0
import 'package:pkg/data/boolean/index.dart' as Data_Boolean;
import 'package:pkg/data/ord/index.dart' as Data_Ord;
import 'package:pkg/data/ring/index.dart' as Data_Ring;
on(f) {
    return (g) {
        return (x) {
            return (y) {
                return f(g(x))(g(y));
            };
        };
    };
}
flip(f) {
    return (b) {
        return (a) {
            return f(a)(b);
        };
    };
}
$$const(a) {
    return (v) {
        return a;
    };
}
applyN(f) {
    return (() {
        go(n) {
            return (acc) {
                return (() {
                    final $1 = n;
                    final $2 = acc;
                    final n1 = $1;
                    final acc1 = $2;
                    if (Data_Ord.lessThanOrEq(Data_Ord.ordInt)(n1)(0)) {
                        return acc1;
                    };
                    if (Data_Boolean.otherwise) {
                        return go(Data_Ring.sub(Data_Ring.ringInt)(n1)(1))(f(acc1));
                    };
                    throw FallThroughError();
                })();
            };
        }
        return go;
    })();
}
applyFlipped(x) {
    return (f) {
        return f(x);
    };
}
apply(f) {
    return (x) {
        return f(x);
    };
}
