// Generated by hollowpoint version 0.1.0
// ignore_for_file: dead_code
import './foreign.dart' as $foreign;
export './foreign.dart';
import 'package:pkg/data/eq/index.dart' as Data_Eq;
import 'package:pkg/data/ordering/index.dart' as Data_Ordering;
import 'package:pkg/data/ring/index.dart' as Data_Ring;
import 'package:pkg/data/semiring/index.dart' as Data_Semiring;
import 'package:pkg/data/symbol/index.dart' as Data_Symbol;
import 'package:pkg/record/unsafe/index.dart' as Record_Unsafe;
import 'package:pkg/type/data/row_list/index.dart' as Type_Data_RowList;
class OrdRecord {
    final dynamic EqRecord0;
    final dynamic compareRecord;
    const OrdRecord(this.EqRecord0, this.compareRecord);
    static dynamic get create => (EqRecord0) {
        return (compareRecord) {
            return OrdRecord(EqRecord0, compareRecord);
        };
    };
}
class Ord1 {
    final dynamic Eq10;
    final dynamic compare1;
    const Ord1(this.Eq10, this.compare1);
    static dynamic get create => (Eq10) {
        return (compare1) {
            return Ord1(Eq10, compare1);
        };
    };
}
class Ord {
    final dynamic Eq0;
    final dynamic compare;
    const Ord(this.Eq0, this.compare);
    static dynamic get create => (Eq0) {
        return (compare) {
            return Ord(Eq0, compare);
        };
    };
}
final ordVoid = Ord(() {
    return Data_Eq.eqVoid;
}, (v) {
    return (v1) {
        return Data_Ordering.EQ();
    };
});
final ordUnit = Ord(() {
    return Data_Eq.eqUnit;
}, (v) {
    return (v1) {
        return Data_Ordering.EQ();
    };
});
final ordString = Ord(() {
    return Data_Eq.eqString;
}, $foreign.ordStringImpl(Data_Ordering.LT())(Data_Ordering.EQ())(Data_Ordering.GT()));
final ordRecordNil = OrdRecord(() {
    return Data_Eq.eqRowNil;
}, (v) {
    return (v1) {
        return (v2) {
            return Data_Ordering.EQ();
        };
    };
});
final ordOrdering = Ord(() {
    return Data_Ordering.eqOrdering;
}, (v) {
    return (v1) {
        return (() {
            final $39 = v;
            final $40 = v1;
            if ($39 is Data_Ordering.LT) {
                if ($40 is Data_Ordering.LT) {
                    return Data_Ordering.EQ();
                };
            };
            if ($39 is Data_Ordering.EQ) {
                if ($40 is Data_Ordering.EQ) {
                    return Data_Ordering.EQ();
                };
            };
            if ($39 is Data_Ordering.GT) {
                if ($40 is Data_Ordering.GT) {
                    return Data_Ordering.EQ();
                };
            };
            if ($39 is Data_Ordering.LT) {
                return Data_Ordering.LT();
            };
            if ($39 is Data_Ordering.EQ) {
                if ($40 is Data_Ordering.LT) {
                    return Data_Ordering.GT();
                };
            };
            if ($39 is Data_Ordering.EQ) {
                if ($40 is Data_Ordering.GT) {
                    return Data_Ordering.LT();
                };
            };
            if ($39 is Data_Ordering.GT) {
                return Data_Ordering.GT();
            };
            throw FallThroughError();
        })();
    };
});
final ordNumber = Ord(() {
    return Data_Eq.eqNumber;
}, $foreign.ordNumberImpl(Data_Ordering.LT())(Data_Ordering.EQ())(Data_Ordering.GT()));
final ordInt = Ord(() {
    return Data_Eq.eqInt;
}, $foreign.ordIntImpl(Data_Ordering.LT())(Data_Ordering.EQ())(Data_Ordering.GT()));
final ordChar = Ord(() {
    return Data_Eq.eqChar;
}, $foreign.ordCharImpl(Data_Ordering.LT())(Data_Ordering.EQ())(Data_Ordering.GT()));
final ordBoolean = Ord(() {
    return Data_Eq.eqBoolean;
}, $foreign.ordBooleanImpl(Data_Ordering.LT())(Data_Ordering.EQ())(Data_Ordering.GT()));
compareRecord(dict) {
    return dict['compareRecord'];
}
ordRecord(dictRowToList) {
    return (dictOrdRecord) {
        return Ord(() {
            return Data_Eq.eqRec(null)(dictOrdRecord['EqRecord0'](null));
        }, compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy()));
    };
}
compare1(dict) {
    return dict['compare1'];
}
compare(dict) {
    return dict['compare'];
}
comparing(dictOrd) {
    return (f) {
        return (x) {
            return (y) {
                return compare(dictOrd)(f(x))(f(y));
            };
        };
    };
}
greaterThan(dictOrd) {
    return (a1) {
        return (a2) {
            return (() {
                final v = compare(dictOrd)(a1)(a2);
                return (() {
                    final $41 = v;
                    if ($41 is Data_Ordering.GT) {
                        return true;
                    };
                    return false;
                })();
            })();
        };
    };
}
greaterThanOrEq(dictOrd) {
    return (a1) {
        return (a2) {
            return (() {
                final v = compare(dictOrd)(a1)(a2);
                return (() {
                    final $42 = v;
                    if ($42 is Data_Ordering.LT) {
                        return false;
                    };
                    return true;
                })();
            })();
        };
    };
}
signum(dictOrd) {
    return (dictRing) {
        return (x) {
            return (() {
                final $43 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing['Semiring0'](null)));
                if ($43) {
                    return Data_Semiring.one(dictRing['Semiring0'](null));
                };
                return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing['Semiring0'](null)));
            })();
        };
    };
}
lessThan(dictOrd) {
    return (a1) {
        return (a2) {
            return (() {
                final v = compare(dictOrd)(a1)(a2);
                return (() {
                    final $44 = v;
                    if ($44 is Data_Ordering.LT) {
                        return true;
                    };
                    return false;
                })();
            })();
        };
    };
}
lessThanOrEq(dictOrd) {
    return (a1) {
        return (a2) {
            return (() {
                final v = compare(dictOrd)(a1)(a2);
                return (() {
                    final $45 = v;
                    if ($45 is Data_Ordering.GT) {
                        return false;
                    };
                    return true;
                })();
            })();
        };
    };
}
max(dictOrd) {
    return (x) {
        return (y) {
            return (() {
                final v = compare(dictOrd)(x)(y);
                return (() {
                    final $46 = v;
                    if ($46 is Data_Ordering.LT) {
                        return y;
                    };
                    if ($46 is Data_Ordering.EQ) {
                        return x;
                    };
                    if ($46 is Data_Ordering.GT) {
                        return x;
                    };
                    throw FallThroughError();
                })();
            })();
        };
    };
}
min(dictOrd) {
    return (x) {
        return (y) {
            return (() {
                final v = compare(dictOrd)(x)(y);
                return (() {
                    final $47 = v;
                    if ($47 is Data_Ordering.LT) {
                        return x;
                    };
                    if ($47 is Data_Ordering.EQ) {
                        return x;
                    };
                    if ($47 is Data_Ordering.GT) {
                        return y;
                    };
                    throw FallThroughError();
                })();
            })();
        };
    };
}
ordArray(dictOrd) {
    return Ord(() {
        return Data_Eq.eqArray(dictOrd['Eq0'](null));
    }, (() {
        toDelta(x) {
            return (y) {
                return (() {
                    final v = compare(dictOrd)(x)(y);
                    return (() {
                        final $48 = v;
                        if ($48 is Data_Ordering.EQ) {
                            return 0;
                        };
                        if ($48 is Data_Ordering.LT) {
                            return 1;
                        };
                        if ($48 is Data_Ordering.GT) {
                            return Data_Ring.negate(Data_Ring.ringInt)(1);
                        };
                        throw FallThroughError();
                    })();
                })();
            };
        }
        return (xs) {
            return (ys) {
                return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
            };
        };
    })());
}
final ord1Array = Ord1(() {
    return Data_Eq.eq1Array;
}, (dictOrd) {
    return compare(ordArray(dictOrd));
});
ordRecordCons(dictOrdRecord) {
    return (dictCons) {
        return (dictIsSymbol) {
            return (dictOrd) {
                return OrdRecord(() {
                    return Data_Eq.eqRowCons(dictOrdRecord['EqRecord0'](null))(null)(dictIsSymbol)(dictOrd['Eq0'](null));
                }, (v) {
                    return (ra) {
                        return (rb) {
                            return (() {
                                final unsafeGet$prime = Record_Unsafe.unsafeGet;
                                final key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy());
                                final left = compare(dictOrd)(unsafeGet$prime(key)(ra))(unsafeGet$prime(key)(rb));
                                return (() {
                                    final $49 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ());
                                    if ($49) {
                                        return left;
                                    };
                                    return compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy())(ra)(rb);
                                })();
                            })();
                        };
                    };
                });
            };
        };
    };
}
clamp(dictOrd) {
    return (low) {
        return (hi) {
            return (x) {
                return min(dictOrd)(hi)(max(dictOrd)(low)(x));
            };
        };
    };
}
between(dictOrd) {
    return (low) {
        return (hi) {
            return (x) {
                return (() {
                    final $50 = low;
                    final $51 = hi;
                    final $52 = x;
                    final low1 = $50;
                    final hi1 = $51;
                    final x1 = $52;
                    if (lessThan(dictOrd)(x1)(low1)) {
                        return false;
                    };
                    if (greaterThan(dictOrd)(x1)(hi1)) {
                        return false;
                    };
                    if (true) {
                        return true;
                    };
                    throw FallThroughError();
                })();
            };
        };
    };
}
abs(dictOrd) {
    return (dictRing) {
        return (x) {
            return (() {
                final $53 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing['Semiring0'](null)));
                if ($53) {
                    return x;
                };
                return Data_Ring.negate(dictRing)(x);
            })();
        };
    };
}
