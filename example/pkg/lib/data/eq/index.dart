// Generated by hollowpoint version 0.1.0
import './foreign.dart' as $foreign;
export './foreign.dart';
import 'package:pkg/data/heyting_algebra/index.dart' as Data_HeytingAlgebra;
import 'package:pkg/data/symbol/index.dart' as Data_Symbol;
import 'package:pkg/record/unsafe/index.dart' as Record_Unsafe;
import 'package:pkg/type/data/row_list/index.dart' as Type_Data_RowList;
class EqRecord {
    final dynamic eqRecord;
    const EqRecord(this.eqRecord);
    static dynamic get create => (eqRecord) {
        return EqRecord(eqRecord);
    };
}
class Eq1 {
    final dynamic eq1;
    const Eq1(this.eq1);
    static dynamic get create => (eq1) {
        return Eq1(eq1);
    };
}
class Eq {
    final dynamic eq;
    const Eq(this.eq);
    static dynamic get create => (eq) {
        return Eq(eq);
    };
}
final eqVoid = Eq((v) {
    return (v1) {
        return true;
    };
});
final eqUnit = Eq((v) {
    return (v1) {
        return true;
    };
});
final eqString = Eq($foreign.eqStringImpl);
final eqRowNil = EqRecord((v) {
    return (v1) {
        return (v2) {
            return true;
        };
    };
});
eqRecord(dict) {
    return dict['eqRecord'];
}
eqRec(dictRowToList) {
    return (dictEqRecord) {
        return Eq(eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy()));
    };
}
final eqNumber = Eq($foreign.eqNumberImpl);
final eqInt = Eq($foreign.eqIntImpl);
final eqChar = Eq($foreign.eqCharImpl);
final eqBoolean = Eq($foreign.eqBooleanImpl);
eq1(dict) {
    return dict['eq1'];
}
eq(dict) {
    return dict['eq'];
}
eqArray(dictEq) {
    return Eq($foreign.eqArrayImpl(eq(dictEq)));
}
final eq1Array = Eq1((dictEq) {
    return eq(eqArray(dictEq));
});
eqRowCons(dictEqRecord) {
    return (dictCons) {
        return (dictIsSymbol) {
            return (dictEq) {
                return EqRecord((v) {
                    return (ra) {
                        return (rb) {
                            return (() {
                                final tail = eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy())(ra)(rb);
                                final key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy());
                                final get = Record_Unsafe.unsafeGet(key);
                                return Data_HeytingAlgebra.conj(Data_HeytingAlgebra.heytingAlgebraBoolean)(eq(dictEq)(get(ra))(get(rb)))(tail);
                            })();
                        };
                    };
                });
            };
        };
    };
}
notEq(dictEq) {
    return (x) {
        return (y) {
            return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
        };
    };
}
notEq1(dictEq1) {
    return (dictEq) {
        return (x) {
            return (y) {
                return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);
            };
        };
    };
}
compare(lt) => (eq) => (gt) => (x) => (y) {
  final d = compare(lt)(eq)(gt);
  return x < y ? lt : x == y ? d(x)(y -1) : gt;
};
