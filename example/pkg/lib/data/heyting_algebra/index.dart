// Generated by hollowpoint version 0.1.0
import './foreign.dart' as $foreign;
export './foreign.dart';
import 'package:pkg/data/symbol/index.dart' as Data_Symbol;
import 'package:pkg/data/unit/index.dart' as Data_Unit;
import 'package:pkg/record/unsafe/index.dart' as Record_Unsafe;
import 'package:pkg/type/data/row/index.dart' as Type_Data_Row;
import 'package:pkg/type/data/row_list/index.dart' as Type_Data_RowList;
class HeytingAlgebraRecord {
    final dynamic conjRecord;
    final dynamic disjRecord;
    final dynamic ffRecord;
    final dynamic impliesRecord;
    final dynamic notRecord;
    final dynamic ttRecord;
    const HeytingAlgebraRecord(this.conjRecord, this.disjRecord, this.ffRecord, this.impliesRecord, this.notRecord, this.ttRecord);
    static dynamic get create => (conjRecord) {
        return (disjRecord) {
            return (ffRecord) {
                return (impliesRecord) {
                    return (notRecord) {
                        return (ttRecord) {
                            return HeytingAlgebraRecord(conjRecord, disjRecord, ffRecord, impliesRecord, notRecord, ttRecord);
                        };
                    };
                };
            };
        };
    };
}
class HeytingAlgebra {
    final dynamic conj;
    final dynamic disj;
    final dynamic ff;
    final dynamic implies;
    final dynamic not;
    final dynamic tt;
    const HeytingAlgebra(this.conj, this.disj, this.ff, this.implies, this.not, this.tt);
    static dynamic get create => (conj) {
        return (disj) {
            return (ff) {
                return (implies) {
                    return (not) {
                        return (tt) {
                            return HeytingAlgebra(conj, disj, ff, implies, not, tt);
                        };
                    };
                };
            };
        };
    };
}
ttRecord(dict) {
    return dict['ttRecord'];
}
tt(dict) {
    return dict['tt'];
}
notRecord(dict) {
    return dict['notRecord'];
}
not(dict) {
    return dict['not'];
}
impliesRecord(dict) {
    return dict['impliesRecord'];
}
implies(dict) {
    return dict['implies'];
}
final heytingAlgebraUnit = HeytingAlgebra((v) {
    return (v1) {
        return Data_Unit.unit;
    };
}, (v) {
    return (v1) {
        return Data_Unit.unit;
    };
}, Data_Unit.unit, (v) {
    return (v1) {
        return Data_Unit.unit;
    };
}, (v) {
    return Data_Unit.unit;
}, Data_Unit.unit);
final heytingAlgebraRecordNil = HeytingAlgebraRecord((v) {
    return (v1) {
        return (v2) {
            return {};
        };
    };
}, (v) {
    return (v1) {
        return (v2) {
            return {};
        };
    };
}, (v) {
    return (v1) {
        return {};
    };
}, (v) {
    return (v1) {
        return (v2) {
            return {};
        };
    };
}, (v) {
    return (v1) {
        return {};
    };
}, (v) {
    return (v1) {
        return {};
    };
});
ffRecord(dict) {
    return dict['ffRecord'];
}
ff(dict) {
    return dict['ff'];
}
disjRecord(dict) {
    return dict['disjRecord'];
}
disj(dict) {
    return dict['disj'];
}
final heytingAlgebraBoolean = HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, (a) {
    return (b) {
        return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
    };
}, $foreign.boolNot, true);
conjRecord(dict) {
    return dict['conjRecord'];
}
heytingAlgebraRecord(dictRowToList) {
    return (dictHeytingAlgebraRecord) {
        return HeytingAlgebra(conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy()), disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy()), ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy())(Type_Data_Row.RProxy()), impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy()), notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy()), ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy())(Type_Data_Row.RProxy()));
    };
}
conj(dict) {
    return dict['conj'];
}
heytingAlgebraFunction(dictHeytingAlgebra) {
    return HeytingAlgebra((f) {
        return (g) {
            return (a) {
                return conj(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, (f) {
        return (g) {
            return (a) {
                return disj(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, (v) {
        return ff(dictHeytingAlgebra);
    }, (f) {
        return (g) {
            return (a) {
                return implies(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, (f) {
        return (a) {
            return not(dictHeytingAlgebra)(f(a));
        };
    }, (v) {
        return tt(dictHeytingAlgebra);
    });
}
heytingAlgebraRecordCons(dictIsSymbol) {
    return (dictCons) {
        return (dictHeytingAlgebraRecord) {
            return (dictHeytingAlgebra) {
                return HeytingAlgebraRecord((v) {
                    return (ra) {
                        return (rb) {
                            return (() {
                                final tail = conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy())(ra)(rb);
                                final key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy());
                                final insert = Record_Unsafe.unsafeSet(key);
                                final get = Record_Unsafe.unsafeGet(key);
                                return insert(conj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                            })();
                        };
                    };
                }, (v) {
                    return (ra) {
                        return (rb) {
                            return (() {
                                final tail = disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy())(ra)(rb);
                                final key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy());
                                final insert = Record_Unsafe.unsafeSet(key);
                                final get = Record_Unsafe.unsafeGet(key);
                                return insert(disj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                            })();
                        };
                    };
                }, (v) {
                    return (row) {
                        return (() {
                            final tail = ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy())(row);
                            final key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy());
                            final insert = Record_Unsafe.unsafeSet(key);
                            return insert(ff(dictHeytingAlgebra))(tail);
                        })();
                    };
                }, (v) {
                    return (ra) {
                        return (rb) {
                            return (() {
                                final tail = impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy())(ra)(rb);
                                final key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy());
                                final insert = Record_Unsafe.unsafeSet(key);
                                final get = Record_Unsafe.unsafeGet(key);
                                return insert(implies(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                            })();
                        };
                    };
                }, (v) {
                    return (row) {
                        return (() {
                            final tail = notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy())(row);
                            final key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy());
                            final insert = Record_Unsafe.unsafeSet(key);
                            final get = Record_Unsafe.unsafeGet(key);
                            return insert(not(dictHeytingAlgebra)(get(row)))(tail);
                        })();
                    };
                }, (v) {
                    return (row) {
                        return (() {
                            final tail = ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy())(row);
                            final key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy());
                            final insert = Record_Unsafe.unsafeSet(key);
                            return insert(tt(dictHeytingAlgebra))(tail);
                        })();
                    };
                });
            };
        };
    };
}
